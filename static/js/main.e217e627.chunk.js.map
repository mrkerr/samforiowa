{"version":3,"sources":["logo.svg","constants/LandingPageConstants.js","components/SamLandingMobile.js","components/SamLandingDesktop.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LANDING_PAGE_TEXT","href","target","SamLandingMobile","props","state","showMeantime","this","setState","meantimeClassNames","className","strings","typeSpeed","showCursor","contentType","onComplete","showInMeantime","bind","React","Component","SamLandingDesktop","App","maxDeviceWidth","minDeviceWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gLAAAA,EAAOC,QAAU,IAA0B,kC,mKCE9BC,EAAoB,uEAA8C,uBAAGC,KAAK,uCAAuCC,OAAO,UAAtD,sBAA9C,kBCmClBC,E,YA/Bb,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,cAAc,GAHA,E,8EAShBC,KAAKC,SAAS,CAACF,cAAeC,KAAKF,MAAMC,iB,+BAIzC,IAAMG,EAAqBF,KAAKF,MAAMC,aAAe,gCAAkC,gCAEvF,OACE,yBAAKI,UAAU,8BACb,kBAAC,IAAD,CACEC,QAAS,CAAC,0CACVC,UAAW,GACXC,YAAY,EACZC,YAAc,OACdC,WAAYR,KAAKS,eAAeC,KAAKV,QAEvC,yBAAKG,UAAWD,GACbT,Q,GA1BoBkB,IAAMC,WCgCtBC,E,YA/Bb,WAAYhB,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,cAAc,GAHA,E,8EAShBC,KAAKC,SAAS,CAACF,cAAeC,KAAKF,MAAMC,iB,+BAIzC,IAAMG,EAAqBF,KAAKF,MAAMC,aAAe,gCAAkC,gCAEvF,OACE,yBAAKI,UAAU,8BACb,kBAAC,IAAD,CACEC,QAAS,CAAC,0CACVC,UAAW,GACXC,YAAY,EACZC,YAAc,OACdC,WAAYR,KAAKS,eAAeC,KAAKV,QAEvC,yBAAKG,UAAWD,GACbT,Q,GA1BqBkB,IAAMC,W,sBCevBE,MAbf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,IAAD,CAAYY,eAAgB,KAC1B,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAYC,eAAgB,KAC1B,kBAAC,EAAD,SCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e217e627.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nexport const LANDING_PAGE_TEXT = <p>In the meantime, &nbsp;follow along on the <a href='https://www.facebook.com/samforiowa/' target='_blank'>Sam For Iowa House</a> Facebook page</p>","import React from 'react';\nimport '../css/SamLanding.css'\nimport Typed from 'react-typed';\nimport {LANDING_PAGE_TEXT as LANDING_PAGE_TEXT} from \"../constants/LandingPageConstants\"\n\nclass SamLandingMobile extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      showMeantime: false\n    }\n  }\n\n  showInMeantime(){\n    let x = 5\n    this.setState({showMeantime: !this.state.showMeantime})\n  }\n\n  render() {\n    const meantimeClassNames = this.state.showMeantime ? 'in-the-meantime show-meantime' : 'in-the-meantime hide-meantime'\n\n    return(\n      <div className='mobile-landing-coming-soon'>\n        <Typed\n          strings={['Sam For Iowa <br/><br/> coming soon...']}\n          typeSpeed={50}\n          showCursor={false}\n          contentType= {'html'}\n          onComplete={this.showInMeantime.bind(this)}\n        />\n        <div className={meantimeClassNames}>\n          {LANDING_PAGE_TEXT}\n        </div>\n      </div>\n    )};\n}\n\nexport default SamLandingMobile;\n","import React from 'react';\nimport '../css/SamLanding.css'\nimport Typed from 'react-typed';\nimport {LANDING_PAGE_TEXT as LANDING_PAGE_TEXT} from \"../constants/LandingPageConstants\"\n\nclass SamLandingDesktop extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      showMeantime: false\n    }\n  }\n\n  showInMeantime(){\n    let x = 5\n    this.setState({showMeantime: !this.state.showMeantime})\n  }\n\n  render() {\n    const meantimeClassNames = this.state.showMeantime ? 'in-the-meantime show-meantime' : 'in-the-meantime hide-meantime'\n\n    return(\n      <div className='mobile-landing-coming-soon'>\n        <Typed\n          strings={['Sam For Iowa <br/><br/> coming soon...']}\n          typeSpeed={50}\n          showCursor={false}\n          contentType= {'html'}\n          onComplete={this.showInMeantime.bind(this)}\n        />\n        <div className={meantimeClassNames}>\n          {LANDING_PAGE_TEXT}\n        </div>\n      </div>\n    )};\n}\n\nexport default SamLandingDesktop;\n","import React from 'react';\nimport logo from './logo.svg';\nimport SamLandingMobile from './components/SamLandingMobile'\nimport SamLandingDesktop from './components/SamLandingDesktop'\nimport MediaQuery from 'react-responsive'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MediaQuery maxDeviceWidth={767}>\n        <SamLandingMobile/>\n      </MediaQuery>\n      <MediaQuery minDeviceWidth={768}>\n        <SamLandingDesktop/>\n      </MediaQuery>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}